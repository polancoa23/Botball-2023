#include <kipr/wombat.h>
#include <stdlib.h>
#include <math.h>
// 3/31 THINGS I CHANGED: increased the speed of the line follow(450 & 0.05) and anytime it goes forward and back
//232.5 ticks per inch
// 40/3 ticks per degree
// sweeper moves to the left when it sorts red
// sweeper moves to the right when it sorts green

//VARIABLES
int lmotor = 1;
int rmotor = 0;
int gmotor = 3;// fake servo
int sweeper = 0;
int grabber = 1;
int lineSense = 1;
int sideSense = 2;
int poleSense = 3;
int close = 150;
int bigOpen = 1000;
int open = 770;
int lilOpen = 450;
int left = 420;
int right = 1490;
int middle = 950;
int midLeft = 500;
int midRight = 1250;
int gray = 2750; 
int black = 3300;
int black1 = 4000;
int white = 2000;
int white1 = 3950;
int count = 0;
int pomSense = 0;
int pom = 2650;
int lspeed = 1000;
float sweepTimeR = 0.3;
float sweepTimeL = 0.3;
int firstRing = -965;
int secondRing = -875;
int thirdRing = -785;
int halfRing = -460;
int regPos = 0;
int puller_touch = 0;
//FUNCTIONS
void drive(int distance, int speed);
void drive_on(int distance, int speed);
void drive_on_side(int distance, int speed);
void drive_on_touch(int speed);
void drive_off(int distance, int speed);
void drive_off_side(int distance, int speed);
void right_turn(int distance, int speed);
void left_turn(int distance, int speed);
void line_follow(int distance, int speed, int port);
void servo(int port, int position, float speed);
void shimmy(int speed);
void drop(int speed, int diff);

int main()
{
    enable_servos();
    shut_down_in(120.0);
    // start w/ sweeper in the middle and the robot at an angle so it could get the green and red pom all at once
    //STEP 1: get ring stand out the way and line up PERFECT
    drive_on(5000,1200); // first param dont matter cuz its gonna keep going till it reaches the black line
    servo(sweeper,right,0.2);
    drive_off(5000,-1200);
    drive(698,-1200);
    msleep(100);
    servo(sweeper,left,0.2);
    left_turn(333,750); // turn to get perpendicular with the line
    msleep(100);
    drive_on(5000,1200);
    drive_off(5000,1200);
    drive(407,1200); //1.75 inches in front of line
    servo(sweeper,right,0.2);
    right_turn(1200,1000);// turn to line up
    servo(sweeper,left,0.2);
    msleep(100);
    drive(465,-1200);
    //drive(465,-1200);
    left_turn(33,1000);
    servo(sweeper,right,0.2);
    msleep(250);

    //STEP 2: pom collection and sorting
    while(count <= 8){
        line_follow(1918,lspeed,lineSense);// theres about 8 inches tween each pom so just in case it doesn't see, we go 8.25
        count++;
        printf("count = %d \n", count);
        msleep(50);
        if(count == 3){
            pom = 2900;
        }
        if(count == 4){
            sweepTimeL = 1;
            sweepTimeR = 1;
        }
        if(count == 5){
            sweepTimeL = 0.5;
            sweepTimeR = 0.5;
            pom = 2650;
        }
        if(count == 7){ // green top
            servo(grabber,close,0.2);
            servo(sweeper,midLeft,1);
            msleep(100);
            servo(grabber,open,0.5);
            servo(sweeper,left,sweepTimeL);
            msleep(50);
            servo(sweeper,right,sweepTimeR);
            msleep(50);
            servo(sweeper,middle,sweepTimeL);
            msleep(50);
            left_turn(200,1000);
            msleep(50);
            servo(sweeper,right,sweepTimeR);
            right_turn(200,1000);
            servo(sweeper,left,sweepTimeL);
        }
        if(count == 8){ // red top
            drive(47,lspeed);
            servo(grabber,close,0.2);
            servo(sweeper,midRight,1);
            msleep(100);
            servo(grabber,open,0.2);
            servo(sweeper,right,sweepTimeR);
            msleep(50);
            servo(sweeper,left,sweepTimeL);
            //msleep(50);
            servo(sweeper,right,sweepTimeR);
            servo(grabber,bigOpen,0.2);
            count++;
        }
        if(count%2 > 0 && count < 7){ // red is odd #
            drive(105,lspeed);
            msleep(50);
            servo(sweeper,left,sweepTimeL);
            msleep(50);
        }
        if(count%2 == 0 && count < 7){ // green is even #
            drive(105,lspeed);
            msleep(50);
            servo(sweeper,right,sweepTimeR);
            msleep(50);
        }
        msleep(50);
    }
    
    //STEP 3: bringing poms to scoring areas
    //adjusting to make sure the poms inside
    servo(sweeper,midLeft+200,0.35); // blabla
    right_turn(200,1000);
    drive(698,750);
    servo(sweeper,right,0.35);
    msleep(100);
    servo(sweeper,midLeft+200,0.35);
    left_turn(200,1000);
    drive(349,750);
    servo(sweeper,right,0.4);
    msleep(100);
    servo(sweeper,left,0.4);
    
    //left turn 90 and sweep
    left_turn(1200,350);  
    servo(sweeper,right,0.4);
    msleep(100);
    servo(sweeper,left,0.4);
    
    //left turn 90 and sweep. finished with sweep
    left_turn(1100,350);  
    servo(sweeper,right,0.4);
    msleep(100);
    servo(sweeper,left,0.4);
    
    //forward till side of sorting area and then 5 more inches to get in pos for turn
    drive_on_side(5000,1000);
    drive_off_side(5000,1000);
    right_turn(33,750);
    drive(1464,750);
    left_turn(20,750);
    drive(279,750);
    msleep(100);
    servo(sweeper,right,0.4);
    msleep(100);
    servo(sweeper,left,0.4);
    msleep(50);
    
    //left turn 10 and sweep
    left_turn(133,350); 
    msleep(100);  
    servo(sweeper,right,0.4);
    msleep(100);
    servo(sweeper,left,0.4);
    msleep(50);
    
    //left turn 40 and sweep
    left_turn(533,350); 
    msleep(100);  
    servo(sweeper,right,0.4);
    msleep(100);
    servo(sweeper,left,0.4);
    msleep(50);
    
    //left turn 45 and sweep. green in box now
    left_turn(533,750); 
    drive(582,500); 
    //servo(grabber,close,0.5);

    //shimmy, getting out the box, and turning
    servo(sweeper,right,0.4);
    msleep(100);
    left_turn(200,750);
    right_turn(200,750);
    left_turn(200,750);
    right_turn(200,750);
    servo(sweeper,left,0.4);
    msleep(100);
    shimmy(750); 
    drive_off(5000,-1200); 
    left_turn(33,500);
    
    //getting 4th multipier
    drive(3489,-1000); 
    msleep(100);
    drop(750,thirdRing);
    drive_on_touch(750);

    //getting past the middle black line
    right_turn(1133,750);
    msleep(100);
    drive_on(5000,1200);
    drive_off(5000,1200);
    right_turn(33,750);
    
    // drive till the middle of the big sorting area and turning 90
    drive(2208,1000); //9.5 in
    left_turn(1167,1000); 
    servo(sweeper,midRight,0.4);
    //servo(grabber,close,0.2);

    // drop off poms and getting out the box
    drive_on(2500,1200);
    drive_off(930,1200);
    drive(1047,1200);  //forward a bit
    shimmy(750); //forward and back shimmy till black line
    servo(sweeper,middle,0.2);
    drive_off(5000,-1200);  // drive off
    left_turn(33,750);
    drive(3489,-1000);  
    
    //STEP 4: getting the rest of the multipliers 
    //getting 3rd multiplier
    msleep(100);
    drop(750,thirdRing);
    drive_on_touch(750);
    
    //turning and getting to the 2nd multiplier 
    right_turn(1133,1000);
    drive(3604,1000);//15.5 in

    //turning and getting 2nd multiplier
    left_turn(1133,1200);
    drive(1860,-1200);
    msleep(100);
    drop(750,secondRing);
    drive_on_touch(750);
  
    //turning and getting to the 1st multiplier
    left_turn(1133,1000);
    drive(3255,-1000);//14 in
    
    //turning and getting 1st multiplier
    right_turn(1133,1000);
    drive(1860,-1200);
    drive(465,1200);
    left_turn(33,1200);
    drive(465,-1200);
    msleep(100);
    drop(750,firstRing);
   
    ao();
    disable_servos();
    return 0;
}
void drive(int distance, int speed){ // distance = # of ticks. 232.5 ticks / inch
    cmpc(rmotor);//reset tick count
    while(abs(gmpc(rmotor)) < distance){// while the tick count is < our tick goal...
        mav(rmotor,speed); // 1st param: port # ; 2nd param: speed -1500 to 1500. dont exceed 1200 tho
        mav(lmotor,speed); 
    }
    mav(rmotor,0); // put the wheels to a stop
    mav(lmotor,0);
    msleep(20);
}
void drive_on(int distance, int speed){
    cmpc(rmotor);
    while(abs(gmpc(rmotor)) < distance){
        if(analog(lineSense) > black){ // stop when we get to the line
            break;
        }
        mav(rmotor,speed);
        mav(lmotor,speed); 
    }
    mav(rmotor,0);
    mav(lmotor,0);
    msleep(20);
}
void drive_on_side(int distance, int speed){
    cmpc(rmotor);
    while(abs(gmpc(rmotor)) < distance){
        if(analog(sideSense) > black1){ // stop when we get to the line
            break;
        }
        mav(rmotor,speed);
        mav(lmotor,speed); 
    }
    mav(rmotor,0);
    mav(lmotor,0);
    msleep(20);
}
void drive_off(int distance, int speed){
    cmpc(rmotor);
    while(abs(gmpc(rmotor)) < distance){
        if(analog(lineSense) < white){ // stop when we off the line
            break;
        }
        mav(rmotor,speed);
        mav(lmotor,speed); 
    }
    mav(rmotor,0);
    mav(lmotor,0);
    msleep(20);
}
void drive_off_side(int distance, int speed){
    cmpc(rmotor);
    while(abs(gmpc(rmotor)) < distance){
        if(analog(sideSense) < white1){ // stop when we off the line
            break;
        }
        mav(rmotor,speed);
        mav(lmotor,speed); 
    }
    mav(rmotor,0);
    mav(lmotor,0);
    msleep(20);
}
void right_turn(int distance, int speed){ // 40/3 inches / degree. 
    cmpc(lmotor);
    while(gmpc(lmotor) < distance){
        mav(rmotor,-speed);
        mav(lmotor,speed);
    }
    mav(rmotor,0);
    mav(lmotor,0);
    msleep(20);
}
void left_turn(int distance, int speed){
    cmpc(rmotor);
    while(gmpc(rmotor) < distance){
        mav(rmotor,speed); 
        mav(lmotor,-speed);
    }
    mav(rmotor,0);
    mav(lmotor,0);
    msleep(20);
}
void line_follow(int distance, int speed, int port){
    cmpc(lmotor);
    cmpc(rmotor);
    while(abs(gmpc(rmotor)) < distance){
        if(analog(pomSense) > pom){ // stop line following when pom is detected
            printf("pom val = %d \n",analog(pomSense));
            break;
        }
        int error = analog(port) - gray; //error > 0 = black. error < 0 = white. gray is calculated by (white board val + black tape val)/2
        float speed_modifier = error * 0.09; // this constant needs adjustment. gray and white val difference. lower if change is too high. higher if change is too low. 0.02-0.1.
        while(analog(lineSense) < 2200){
            printf("line val = %d \n",analog(lineSense));
            mav(rmotor,0); 
            mav(lmotor,speed*1.5);
        }
        /*
        while(analog(lineSense) < 2250){
            printf("line sensor val = %d \n",analog(lineSense));
            mav(rmotor,speed - speed_modifier); 
            mav(lmotor,speed + speed_modifier);
        }
        */
        printf("line val = %d \n",analog(lineSense));
        mav(rmotor,speed + speed_modifier); 
        mav(lmotor, speed - speed_modifier);
    }
    mav(rmotor,0);
    mav(lmotor,0);
    msleep(20);
}
void servo(int port, int position, float speed){ // speed is based off time so it's more consistent.
    float start_time = seconds(); // seconds is the # of seconds since a certain date and time, but it also measures in milliseconds. decimals are in milliseconds
    int start_position = get_servo_position(port);
    int position_difference = position-start_position; // gives us the direction we wanna travel. if pos > start_pos, it will give + direction. if pos < start_pos, it will give - direction.
    while(seconds()-start_time < speed){// time elapsed since start of function. seconds will keep increasing while start time doesn't
        float position_modifier = (seconds()-start_time)/speed;//Goes from 0 to 1. seconds - start_time is just time since loop started. speed is how long we want it to take
        set_servo_position(port, start_position+(position_difference*position_modifier)); // it's adding a lil each time  it loops
    }
    set_servo_position(port,position);
    msleep(50);
}
void shimmy(int speed){
    servo(grabber,open,0.5);
    right_turn(200,speed);
    left_turn(400,speed);
    right_turn(400,speed);
    left_turn(400,speed);
    right_turn(267,speed);
    drive_on(5000,-1200);
    servo(grabber,close,0.2);
}
void drop(int speed, int diff){ //1st diff neg, 2nd diff pos
    printf("puller val = %d \n",gmpc(gmotor));
    cmpc(gmotor);
    mrp(gmotor,speed,diff);
    bmd(gmotor);
    while(get_motor_done(gmotor) == 0){
        bmd(gmotor);
    }
    if(digital(puller_touch) == 1 || abs(gmpc(gmotor)) < abs(diff) - 300){
        printf("puller val = %d \n",gmpc(gmotor));
        printf("puller still touching sensor/didn't move back enough, run it back");
        mrp(gmotor,speed,diff);
        bmd(gmotor);
        while(get_motor_done(gmotor) == 0){
            bmd(gmotor);
        } 
    }
    msleep(50);
    mav(gmotor,0);
    msleep(100);
    drive(1163,1200);
    msleep(20);
}
void drive_on_touch(int speed){
    while(digital(puller_touch) == 0){
        mav(gmotor,speed);
    }
    mav(gmotor,0);
    cmpc(gmotor);
    msleep(20);
}

//easings.net shows how to create different functions to implement into servos. easeInOutCubic is nice to speed up and slow down.  
